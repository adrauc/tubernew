% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ts_plot.R
\name{ts_plot}
\alias{ts_plot}
\title{Plots data as a time series-like data object.}
\usage{
ts_plot(data, by = "days", trim = 0L, tz = "UTC", ...)
}
\arguments{
\item{data}{Data frame or grouped data frame. The data frame needs one column
labeled as "created_at" with POSIXct time data}

\item{by}{Desired interval of time expressed as numeral plus one of
"secs", "mins", "hours", "days", "weeks", "months", or
"years". If a numeric is provided, the value is assumed to be in
seconds.}

\item{trim}{The number of observations to drop off the beginning
and end of the time series.}

\item{tz}{Time zone to be used, defaults to "UTC" (Twitter default)}

\item{...}{Other arguments passed to
[ggplot2::geom_line()].}
}
\value{
If
  [ggplot2](https://cran.r-project.org/package=ggplot2) is
  installed then a [ggplot2::ggplot()] plot object.
}
\description{
Creates a ggplot2 plot of the frequency of channels/videos etc. over a specified
interval of time. The function is originally from the rtweet package but has been
depricated in the newest version of rtweet.
}
\examples{

if (auth_has_default()) {
## get all videos from Logan Paul
videos_logan <- get_all_channel_video_stats(channel_id = "UCG8rbF3g2AMX70yOd8vqIZg")

## plot frequency in 1 min intervals
ts_plot(videos_logan, "mins")

## examine all video activity using weekly intervals
ts_plot(videos_logan, "weeks")
}
## You can also compare different channels in the same plot
ts_plot(dplyr::group_by(videos_df, group_variable), "weeks")
}
\concept{ts_data}
